##################
Team Sentimentalist - DAEN 690
###################

#### Sentiment Analysis 
library(twitteR)
library(ROAuth)
library(httr)
library(base64enc)
library(httpuv)
library(plyr)
library(dplyr)
library(ggplot2)
library(tidyr)
library(tidytext)
library(lubridate)
library(stringr)
library(ggraph)
library(igraph)

feed_trump <- read.csv("Trump_tableau_tweets.csv",header = T)

# Read in dictionary of positive and negative works
pos = scan('positive-words.txt',what='character', comment.char=';')
neg = scan('negative-words.txt',what='character', comment.char=';')
# Add a few twitter-specific negative phrases
pos.words = c(pos, 'upgrade', ':)', '#iVoted', 'voted')
neg.words = c(neg, 'wtf', 'epicfail', 'douchebag')
######### Function Starts ###########
score.sentiment = function(sentences, good_text, bad_text, .progress='none')
{
  require(plyr)
  require(stringr)
  # we got a vector of sentences. plyr will handle a list
  # or a vector as an "l" for us
  # we want a simple array of scores back, so we use
  # "l" + "a" + "ply" = "laply":
  scores = laply(sentences, function(sentence, good_text, bad_text) 
  {
    
    # clean up sentences with R's regex-driven global substitute, gsub():
    #removing Retweets
    sentence = gsub("(RT|via)((?:\\b\\W*@\\w+)+)","",sentence)
    sentence = gsub("&amp","",sentence)
    
    #let's clean html links
    sentence = gsub("http[^[:blank:]]+","",sentence)
    
    #let's remove people names
    sentence = gsub("@\\w+","",sentence)
   
    #let's remove number (alphanumeric)
    sentence = gsub("[ \t]{2,}", "", sentence)
    sentence = gsub("^\\s+|\\s+$", "", sentence)
    #sentence = gsub("Â½"," ",sentence)
    
    sentence = gsub("[^[:alnum:]]"," ",sentence)
    sentence = gsub('[[:punct:]]', '', sentence)
    sentence = gsub('[[:cntrl:]]', '', sentence)
    sentence = gsub('\\d+', '', sentence)
    sentence = str_replace_all(sentence,"RT @[a-z,A-Z]*: ","")
           
    # split into words. str_split is in the stringr package
    word.list = str_split(sentence, '\\s+')
    # sometimes a list() is one level of hierarchy too much
    words = unlist(word.list)
    
    # compare our words to the dictionaries of positive & negative terms
    pos.matches = match(words, good_text)
    neg.matches = match(words, bad_text)
    return(score)
  }, good_text, bad_text, .progress=.progress )
  
  scores.df = data.frame(score=scores, text=sentences)
  return(scores.df)
}
########## Function Ends #################

Dataset <- tweet_trump
Dataset$text <- as.factor(Dataset$text)
Dataset$source <- tweet_trump$source
scores <- score.sentiment(Dataset$text, pos.words, neg.words, .progress='text')
#Tweets By source
tweet_trump$statusSource <- gsub("<.*?>", "",tweet_trump$statusSource)                                                                                                                                                                                                                                                                                                                                                            
tweets <- tweet_trump %>%
  select(text,created_at,user.id,statusSource) %>%
  extract(statusSource, "source", "Twitter for (.*?)<") %>%
  filter(source %in% c("iPhone", "Android"))
tweets %>%
  count(source, hour = as.Date(hour(with_tz(created_at, "EST")))) %>%
  mutate(percent = n / sum(n)) %>%
  ggplot(aes(hour, percent, color = statusSource)) +
  geom_line() +
  scale_y_continuous(labels = percent_format()) +
  labs(x = "Hour of day (EST)",
       y = "% of tweets",
       color = "")

